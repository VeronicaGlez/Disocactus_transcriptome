qlf.BvsA.lfc1 <- glmTreat(fit,
contrast = contrast_matrix[, i],
lfc = 1)
deg.BvsA.lfc1 <- decideTestsDGE(qlf.BvsA.lfc1, p.value = 0.05, adjust.method = "BH", lfc = 1)
table(deg.BvsA.lfc1)
#seleccionar los genes que estadísticamente tienen |lfc| > 1 y robustecer nuestros resultados
DEG.BvsA.lfc1 <- DEGResults(qlf.BvsA.lfc1)
DEG.BvsA.lfc1 <- edgeResults(DEG.BvsA.lfc1, logfc = 1, padj = 0.05)
print(volcano_edgeR(DEG.BvsA.lfc1, lfc = 1, padj = 0.05)) #print volcano_plots
}
dev.off()
#Significant genes
significant.genes <- DEG.BvsA.lfc1 %>% filter(FDR < 0.05 & logFC > 1 | FDR < 0.05 & logFC < -1)
paste("The number of significant genes with |lfc| > 1 is", length(significant.genes$genes))
significant.genes
##Heatmap of genes significant
##Obtener los nombres o ids de los genes con expresión diferencial
significant.ids <- significant.genes$genes
##Crear una matriz de cuentas normalizadas por cpm empleando las cuentas que se encuentran guardadas en el objeto edgeRlist
significant.cpm <- cpm(edgeRlist_DS$counts, log = T)
##Cortamos los genes con expresión significativa
significant.cpm <- significant.cpm[significant.ids, ]
significant.ids
significant.genes
RedBlackGreen <- maPalette(low = "blue", high = "red", mid = "white")
pheatmap(significant.cpm,
border_color = NA,
color = RedBlackGreen,
show_rownames = F,
anotation_col = T,
scale = "row",
angle_col = 0,
fontsize = 12,
fontsize_col = 5,
main = "D.speciosus")
BRW <- maPalette(low = "blue", high = "red", mid = "white")
pheatmap(significant.cpm,
border_color = NA,
color = BRW,
show_rownames = F,
anotation_col = T,
scale = "row",
angle_col = 0,
fontsize = 12,
fontsize_col = 5,
main = "D.speciosus")
BRW <- maPalette(low = "blue", high = "red", mid = "white")
##Obtenemos el heatmap
pheatmap(significant.cpm,
border_color = NA,
color = BRW,
show_rownames = F,
anotation_col = T,
scale = "row",
angle_col = 0,
fontsize = 12,
fontsize_col = 5,
main = "D.speciosus")
significant.cpm
DS_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL)
#Cargar datos
load("../out/dif_exp_DS/counts_DS.RData")
library(ggplot2)
library(tidyverse)
library(edgeR)
library(PCAtools)
library(marray)
library(pheatmap)
library(dplyr)
library(SummarizedExperiment)
library(gplots)
library(RColorBrewer)
library(mixOmics)
library(dplyr)
source("functions.R")
#Charge data
load("../data/dif_exp_analysis/DS/counts_DS.RData")
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
class(counts)
names(counts)
storage.mode(counts) <- "integer"
counts <- as.data.frame(counts)
class(counts)
names(counts)
View(counts)
keep <- rowSums(cpm(counts) >= 5) >=2
table(keep)
counts <- counts[keep, ]
colnames(counts)
groups <- factor(colnames(counts))
table(groups)
groups
edgeRlist_DS <- DGEList(counts = counts,
group = groups,
genes = rownames(counts))
str(edgeRlist_DS)
edgeRlist_DS <- calcNormFactors(edgeRlist_DS, method = "TMM")
##Visualize the normalization factors
edgeRlist_DS$samples
pdf("../out/dif_exp_DS/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist_DS, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pdf("../out/dif_exp_DS/MD_plots.pdf", height = 7, width = 10)
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist_DS, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pdf("../out/dif_exp_DS/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist_DS, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pch <- c(0,1,2,15,16,17)
colors <- rep(c("#FF3399", "#003399", "#006633"), 2)
plotMDS(edgeRlist_DS, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
cormat <- cor(cpm(edgeRlist_DS$counts, log = T))
pheatmap(cormat, border_color = NA, main = "Correlation of replicates")
cormat <- cor(cpm(edgeRlist_DS$counts, log = T))
pheatmap(cormat, border_color = NA, main = "D. speciosus correlation of replicates")
pch <- c(0,1,2,15,16,17)
colors <- rep(c("#FF3399", "#003399", "#006633"), 2)
plotMDS(edgeRlist_DS, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
cormat <- cor(cpm(edgeRlist_DS$counts, log = T))
pheatmap(cormat, border_color = NA, main = "D. speciosus correlation of replicates")
##Expresimental matrix design
design <- model.matrix(~0+edgeRlist_DS$samples$group)
design
##El término ~0 le indica a la función no incluir una columna de intersecciones y solamente incluir tantas columnas como grupos en nuestro diseño experimental
colnames(design) <- levels(edgeRlist_DS$samples$group)
design
edgeRlist_DS <- estimateDisp(edgeRlist_DS, design = design, robust = T)
plotBCV(edgeRlist_DS)
fit <- glmQLFit(edgeRlist_DS, design, robust=TRUE)
head(fit$coefficients)
plotQLDisp(fit)
summary(fit$df.prior)
contrast_matrix <- makeContrasts(
DS1_PAvsDS2_ = DS1_PA - DS2_PA ,
DS2_PAvsDS3_ = DS2_PA - DS3_PA ,
DS1_PAvsDS3_ = DS1_PA - DS3_PA ,
DS1_PCvsDS2_ = DS1_PC - DS2_PC ,
DS2_PCvsDS3_ = DS2_PC - DS3_PC ,
DS1_PCvsDS3_ = DS1_PC - DS3_PC , levels=design)
contrast_matrix
pdf("../out/dif_exp_DS/volcano_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns)
for (i in c(1:6)) {
qlf.BvsA.lfc1 <- glmTreat(fit,
contrast = contrast_matrix[, i],
lfc = 1)
deg.BvsA.lfc1 <- decideTestsDGE(qlf.BvsA.lfc1, p.value = 0.05, adjust.method = "BH", lfc = 1)
table(deg.BvsA.lfc1)
DEG.BvsA.lfc1 <- DEGResults(qlf.BvsA.lfc1)
DEG.BvsA.lfc1 <- edgeResults(DEG.BvsA.lfc1, logfc = 1, padj = 0.05)
print(volcano_edgeR(DEG.BvsA.lfc1, lfc = 1, padj = 0.05)) #print volcano_plots
}
dev.off()
significant.genes <- DEG.BvsA.lfc1 %>% filter(FDR < 0.05 & logFC > 1 | FDR < 0.05 & logFC < -1)
paste("The number of significant genes with |lfc| > 1 is", length(significant.genes$genes))
significant.genes
significant.ids <- significant.genes$genes
significant.cpm <- cpm(edgeRlist_DS$counts, log = T, prior.count = 1)
significant.cpm <- significant.cpm[significant.ids, ]
BRW <- maPalette(low = "blue", high = "red", mid = "white")
pheatmap(significant.cpm,
border_color = NA,
color = BRW,
show_rownames = F,
anotation_col = T,
scale = "row",
angle_col = 0,
fontsize = 12,
fontsize_col = 5,
main = "D.speciosus")
significant.cpm
DS_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL)
##plot the dendogram only
plot(DS_HS$ddc, leaflab="none")
abline(h=25, lwd=2, col="red")
##Using this dendrogram, we might want to cut the tree at level h=25. using the function cutree, which will provide a cluster membership for each gene.
geneClust <- cutree(as.hclust(DS_HS$ddc), h=25)
head(geneClust)
##To see the gene clust total
length(unique(geneClust))
##To explore genes in every gene cluster
names(which(geneClust == 12))
class(geneClust)
geneClust<-as.vector(geneClust)
##Convert geneClust in a tibble
geneClust <- cutree(as.hclust(DS_HS$ddc), h=25)
geneClust<-enframe(geneClust, name = "genes", value = "cluster")
geneClust
##
trans_cts_cluster <- significant.genes %>%
inner_join(geneClust, by = "genes")
head(trans_cts_cluster, 500)
trans_cts_cluster %>%
ggplot(aes(logFC, condition)) +
geom_line(aes(group = genes)) +
facet_grid(rows = vars(genes), cols = vars(cluster))
#sample clustering to identify outliers using hclust function
hc <- hclust(as.dist(1-cor(significant.cpm, method="spearman")), method="complete") # Clusters columns by Spearman correlation.
TreeC = as.dendrogram(hc, method="average")
plot(TreeC,
main = "Sample Clustering D.speciosus",
ylab = "Height")
??goana
go <- goana(contrast_matrix, species="Bv")
go <- goana(contrast_matrix)
res <- glmQLFTest(fit, contrast=contrast_matrix)
topTags(res)
contrast_matrix
res <- glmQLFTest(fit, contrast=contrast_matrix)
topTags(res)
significant.genes
res <- glmQLFTest(fit, contrast=contrast_matrix)
topTags(res)
significant.genes
head(fit$coefficients)
go <- goana(significant.genes)
install.packages("org.Hs.eg.db")
BiocManager::install("org.Hs.eg.db")
go <- goana(significant.genes)
go <- goana(geneClust)
geneClust<-as.vector(geneClust)
go <- goana(geneClust)
geneClust<-as.vector(geneClust)
??DEG.BvsA.lfc1
go <- goana(qlf.BvsA.lfc1)
qlf.BvsA.lfc1
go <- goana(significant.genes)
library(ggplot2)
library(tidyverse)
library(edgeR)
library(PCAtools)
library(marray)
library(pheatmap)
library(dplyr)
library(SummarizedExperiment)
library(gplots)
library(RColorBrewer)
library(mixOmics)
library(dplyr)
source("functions.R")
#Charge data
load("../data/dif_exp_analysis/DE/counts_DE.RData")
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
#Cargar datos
load("../data/dif_exp_analysis/DE/counts_DE.RData")
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
class(counts)
names(counts)
storage.mode(counts) <- "integer"
##Recodificar la matriz de cuentas a data frame
counts <- as.data.frame(counts)
class(counts)
names(counts)
View(counts)
##Seleccionando genes con al menos 5 cuentas por millón (cpm) en al menos 2 muestras
keep <- rowSums(cpm(counts) >= 5) >=2
table(keep)
##Cortando los datos originales
counts <- counts[keep, ]
colnames(counts)
##Usar los nombres de las columnas de la matriz de cuentas para seleccionar los dos grupos experimentales
groups <- factor(colnames(counts))
table(groups)
groups
edgeRlist_DE <- DGEList(counts = counts,
group = groups,
genes = rownames(counts))
str(edgeRlist_DE)
#Normalizar datos
edgeRlist_DE <- calcNormFactors(edgeRlist_DE, method = "TMM")
##Visualize the normalization factors
edgeRlist_DE$samples
pdf("../out/dif_exp_DE/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist_DE, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pch <- c(0,1,2,15,16,17)
colors <- rep(c("#FF3399", "#003399", "#006633"), 2)
plotMDS(edgeRlist_DE, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
#Cargar datos
load("../data/dif_exp_analysis/DE/counts_DE.RData")
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
#Cargar datos
load("../data/dif_exp_analysis/DE/counts_DE.RData")
#Cargar datos
load("../data/dif_exp_analysis/DE/counts_DE.RData")
class(counts)
names(counts)
storage.mode(counts) <- "integer"
##Recodificar la matriz de cuentas a data frame
counts <- as.data.frame(counts)
class(counts)
names(counts)
View(counts)
##Seleccionando genes con al menos 5 cuentas por millón (cpm) en al menos 2 muestras
keep <- rowSums(cpm(counts) >= 5) >=2
table(keep)
##Cortando los datos originales
counts <- counts[keep, ]
colnames(counts)
##Usar los nombres de las columnas de la matriz de cuentas para seleccionar los dos grupos experimentales
groups <- factor(colnames(counts))
table(groups)
groups
#Crear la lista empleando la matriz de cuentas y los grupos
edgeRlist_DE <- DGEList(counts = counts,
group = groups,
genes = rownames(counts))
str(edgeRlist_DE)
#Normalizar datos
edgeRlist_DE <- calcNormFactors(edgeRlist_DE, method = "TMM")
##Visualize the normalization factors
edgeRlist_DE$samples
pdf("../out/dif_exp_DE/MD_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:18)) {
print(plotMD(cpm(edgeRlist_DE, log = T), column = i))
grid(col = "blue")
abline(h = 0, col = "red", lty = 2, lwd = 2)
}
dev.off()
pch <- c(0,1,2,15,16,17)
colors <- rep(c("#FF3399", "#003399", "#006633"), 2)
plotMDS(edgeRlist_DE, col=colors[groups], pch=pch[groups])
legend("topright", legend=levels(groups), pch=pch, col=colors, ncol=2)
cormat <- cor(cpm(edgeRlist_DE$counts, log = T))
pheatmap(cormat, border_color = NA, main = "D.eichlamii Correlation of replicates")
#Expresimental matrix design
design <- model.matrix(~0+edgeRlist_DE$samples$group)
design
##El término ~0 le indica a la función no incluir una columna de intersecciones y solamente incluir tantas columnas como grupos en nuestro diseño experimental
colnames(design) <- levels(edgeRlist_DE$samples$group)
design
edgeRlist_DE <- estimateDisp(edgeRlist_DE, design = design, robust = T)
plotBCV(edgeRlist_DS)
fit <- glmQLFit(edgeRlist_DE, design, robust=TRUE)
head(fit$coefficients)
plotQLDisp(fit)
summary(fit$df.prior)
plotBCV(edgeRlist_DS)
plotBCV(edgeRlist_DE)
fit <- glmQLFit(edgeRlist_DE, design, robust=TRUE)
head(fit$coefficients)
plotQLDisp(fit)
summary(fit$df.prior)
contrast_matrix <- makeContrasts(
DE1_PAvsDE2_ = DE1_PA - DE2_PA ,
DE2_PAvsDE3_ = DE2_PA - DE3_PA ,
DE1_PAvsDE3_ = DE1_PA - DE3_PA ,
DE1_PCvsDE2_ = DE1_PC - DE2_PC ,
DE2_PCvsDE3_ = DE2_PC - DE3_PC ,
DE1_PCvsDE3_ = DE1_PC - DE3_PC , levels=design)
contrast_matrix
pdf("../out/dif_exp_DE/volcano_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:6)) {
qlf.BvsA.lfc1 <- glmTreat(fit,
contrast = contrast_matrix[, i],
lfc = 1)
deg.BvsA.lfc1 <- decideTestsDGE(qlf.BvsA.lfc1, p.value = 0.05, adjust.method = "BH", lfc = 1)
table(deg.BvsA.lfc1)
#seleccionar los genes que estadísticamente tienen |lfc| > 1 y robustecer nuestros resultados
DEG.BvsA.lfc1 <- DEGResults(qlf.BvsA.lfc1)
DEG.BvsA.lfc1 <- edgeResults(DEG.BvsA.lfc1, logfc = 1, padj = 0.05)
print(volcano_edgeR(DEG.BvsA.lfc1, lfc = 1, padj = 0.05)) #print volcano_plots
}
source("functions.R")
edgeRlist_DE <- estimateDisp(edgeRlist_DE, design = design, robust = T)
plotBCV(edgeRlist_DE)
fit <- glmQLFit(edgeRlist_DE, design, robust=TRUE)
head(fit$coefficients)
plotQLDisp(fit)
summary(fit$df.prior)
contrast_matrix <- makeContrasts(
DE1_PAvsDE2_ = DE1_PA - DE2_PA ,
DE2_PAvsDE3_ = DE2_PA - DE3_PA ,
DE1_PAvsDE3_ = DE1_PA - DE3_PA ,
DE1_PCvsDE2_ = DE1_PC - DE2_PC ,
DE2_PCvsDE3_ = DE2_PC - DE3_PC ,
DE1_PCvsDE3_ = DE1_PC - DE3_PC , levels=design)
contrast_matrix
pdf("../out/dif_exp_DE/volcano_plots.pdf", height = 7, width = 10)
par(mfrow = c(2, 3)) ##Generate a frame to store 6 plots in 2 rows and 3 columns
for (i in c(1:6)) {
qlf.BvsA.lfc1 <- glmTreat(fit,
contrast = contrast_matrix[, i],
lfc = 1)
deg.BvsA.lfc1 <- decideTestsDGE(qlf.BvsA.lfc1, p.value = 0.05, adjust.method = "BH", lfc = 1)
table(deg.BvsA.lfc1)
#seleccionar los genes que estadísticamente tienen |lfc| > 1 y robustecer nuestros resultados
DEG.BvsA.lfc1 <- DEGResults(qlf.BvsA.lfc1)
DEG.BvsA.lfc1 <- edgeResults(DEG.BvsA.lfc1, logfc = 1, padj = 0.05)
print(volcano_edgeR(DEG.BvsA.lfc1, lfc = 1, padj = 0.05)) #print volcano_plots
}
dev.off()
#Significant genes
significant.genes <- DEG.BvsA.lfc1 %>% filter(FDR < 0.05 & logFC > 1 | FDR < 0.05 & logFC < -1)
paste("The number of significant genes with |lfc| > 1 is", length(significant.genes$genes))
##Heatmap of genes significant
##Obtener los nombres o ids de los genes con expresión diferencial
significant.ids <- significant.genes$genes
##Crear una matriz de cuentas normalizadas por cpm (counts per million) empleando las cuentas que se encuentran guardadas en el objeto edgeRlist
significant.cpm <- cpm(edgeRlist_DE$counts, log = T)
##Cortamos los genes con expresión significativa
significant.cpm <- significant.cpm[significant.ids, ]
OBW <- maPalette(low = "orange", high = "blue", mid = "white")
pheatmap(significant.cpm,
border_color = NA,
color = OBW,
show_rownames = F,
anotation_col = T,
scale = "row",
angle_col = 0,
fontsize = 12,
fontsize_col = 6,
main = "D.eichalmii")
significant.cpm
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL)
#plot the dendogram only
plot(DE_HS$ddc, leaflab="none")
abline(h=21, lwd=2, col="red")
abline(h=25, lwd=2, col="red")
#Using the data in significant.cpm we will extrac the gene clusters
significant.cpm
#Heatmat to extract dendogram to get expression clusters
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL)
#plot the dendogram only
plot(DE_HS$ddc, leaflab="none")
abline(h=25, lwd=2, col="red")
#Using this dendrogram, we might want to cut the tree at level h=25. using the function cutree, which will provide a cluster membership for each gene.
geneClust <- cutree(as.hclust(DE_HS$ddc), h=25)
head(geneClust)
#To see the gene clust total
length(unique(geneClust))
#To explore genes in every gene cluster
names(which(geneClust == 14))
#To explore genes in every gene cluster
names(which(geneClust == 10))
class(geneClust)
geneClust<-as.vector(geneClust)
##Convert geneClust in a tibble
geneClust <- cutree(as.hclust(DS_HS$ddc), h=21)
##Convert geneClust in a tibble
geneClust <- cutree(as.hclust(DE_HS$ddc), h=21)
geneClust<-enframe(geneClust, name = "genes", value = "cluster")
hc <- hclust(as.dist(1-cor(significant.cpm, method="spearman")), method="complete") # Clusters columns by Spearman correlation.
TreeC = as.dendrogram(hc, method="average")
plot(TreeC,
main = "Sample Clustering D.eichlamii",
ylab = "Height")
sessionInfo()
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
knitr::opts_chunk$set(echo = TRUE)
setwd("~/Documentos/EpiDiso/Disocactus_transcriptome/bin")
rmarkdown::render("dif_exp_DE.r", "pdf_document")
rmarkdown::render("dif_exp_DE.r", "../out/dif_exp_analysis/DE/pdf_document.pdf")
rmarkdown::render("dif_exp_DE.r", "pdf_document.pdf")
rmarkdown::render("dif_exp_DE.r")
rmarkdown::render("dif_exp_DE.r", "D. eichlamii diferencial expression analysis.pdf")
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL)
?cim
?cim
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL, margins = c(5, 5))
install.packages("markdown")
?markdown
??markdown
rmarkdown::render("dif_exp_DE.r", "pdf_document")
rmarkdown::render("dif_exp_DE.r")
rmarkdown::render("dif_exp_DE.r")
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL, margins = c(3, 3))
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL, margins = c(4, 3))
DE_HS<- cim(t(significant.cpm), color = NULL, symkey = FALSE, row.cex = NULL,
col.cex = NULL, margins = c(2, 4))
rmarkdown::render("dif_exp_DE.r", "pdf_document")
source('~/Documentos/EpiDiso/Disocactus_transcriptome/bin/dif_exp_DE.r')
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
